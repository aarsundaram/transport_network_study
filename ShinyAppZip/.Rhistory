# JAGS Little Language
model_string <- "model{
# Likelihood
for(i in 1:n){
mu1[i] <- (beta1 + beta2*seatprop_rj[i] + beta2*ger_tertiary_rj[i]+ beta3*ger_secondary_rj[i] + beta4*gdp_rj[i] + beta5*gni_rj[i])
flfpr_rj[i]   ~ dnorm(mu1[i],inv.var1)T(0, 10)
}
# Prior for beta
beta1 ~ dnorm(0,0.01)
beta2 ~ dnorm(0,0.01)
beta3 ~ dnorm(0,0.01)
beta4 ~ dnorm(0,0.01)
beta5 ~ dnorm(0,0.01)
# Prior for the inverse variance
var1   ~ dunif(0.01, 0.99)
var2   ~ dunif(0.01, 0.99)
var3   ~ dunif(0.01, 0.99)
var4   ~ dunif(0.01, 0.99)
var5   ~ dunif(0.01, 0.99)
inv.var1   <- 1/var1
inv.var2   <- 1/var2
inv.var3   <- 1/var3
inv.var4   <- 1/var4
inv.var5   <- 1/var5
sigma1     <- sqrt(var1)
sigma2     <- sqrt(var2)
sigma3     <- sqrt(var3)
sigma4     <- sqrt(var4)
sigma5     <- sqrt(var5)
}"
model <- jags.model(textConnection(model_string), data = list(flfpr_rj=flfpr_rj, seatprop_rj=seatprop_rj, gdp_rj=gdp_rj, gni_rj=gni_rj, ger_tertiary_rj=ger_tertiary_rj,ger_secondary_rj=ger_secondary_rj, n=n), n.chains = 6)
library(rjags)
# Normalized datasets
flfpr_rj <- mean_by_year_low$flfpr
seatprop_rj <- mean_by_year_low$seatprop
#ger_tertiary_rj <- mean_by_year_low$ger_tertiary
#ger_secondary_rj <- mean_by_year_low$ger_secondary
gdp_rj <- mean_by_year_low$gdp
gni_rj <- mean_by_year_low$gni
n <- nrow(mean_by_year_low)
# JAGS Little Language
model_string <- "model{
# Likelihood
for(i in 1:n){
mu1[i] <- (beta1 + beta2*seatprop_rj[i] + beta2*gni_rj[i]+ beta3*gdp_rj[i])
flfpr_rj[i]   ~ dnorm(mu1[i],inv.var1)T(0, 10)
}
# Prior for beta
beta1 ~ dnorm(0,0.01)
beta2 ~ dnorm(0,0.01)
beta3 ~ dnorm(0,0.01)
#beta4 ~ dnorm(0,0.01)
#beta5 ~ dnorm(0,0.01)
# Prior for the inverse variance
var1   ~ dunif(0.01, 0.99)
var2   ~ dunif(0.01, 0.99)
var3   ~ dunif(0.01, 0.99)
#var4   ~ dunif(0.01, 0.99)
#var5   ~ dunif(0.01, 0.99)
inv.var1   <- 1/var1
inv.var2   <- 1/var2
inv.var3   <- 1/var3
#inv.var4   <- 1/var4
#inv.var5   <- 1/var5
sigma1     <- sqrt(var1)
sigma2     <- sqrt(var2)
sigma3     <- sqrt(var3)
#sigma4     <- sqrt(var4)
#sigma5     <- sqrt(var5)
}"
model <- jags.model(textConnection(model_string), data = list(flfpr_rj=flfpr_rj, seatprop_rj=seatprop_rj, gdp_rj=gdp_rj, gni_rj=gni_rj,n=n), n.chains = 4)
View(mean_by_year_low)
?replace
?if.na
is.nan.data.frame <- function(x)
do.call(cbind, lapply(x, is.nan))
mean_by_year_low[is.nan(data123)] <- 0
is.nan.data.frame <- function(x)
do.call(cbind, lapply(x, is.nan))
mean_by_year_low[is.nan(mean_by_year_low)] <- 0
View(mean_by_year_low)
library(rjags)
# Normalized datasets
flfpr_rj <- mean_by_year_low$flfpr
seatprop_rj <- mean_by_year_low$seatprop
#ger_tertiary_rj <- mean_by_year_low$ger_tertiary
#ger_secondary_rj <- mean_by_year_low$ger_secondary
gdp_rj <- mean_by_year_low$gdp
gni_rj <- mean_by_year_low$gni
n <- nrow(mean_by_year_low)
# JAGS Little Language
model_string <- "model{
# Likelihood
for(i in 1:n){
mu1[i] <- (beta1 + beta2*seatprop_rj[i] + beta2*gni_rj[i]+ beta3*gdp_rj[i])
flfpr_rj[i]   ~ dnorm(mu1[i],inv.var1)T(0, 10)
}
# Prior for beta
beta1 ~ dnorm(0,0.01)
beta2 ~ dnorm(0,0.01)
beta3 ~ dnorm(0,0.01)
#beta4 ~ dnorm(0,0.01)
#beta5 ~ dnorm(0,0.01)
# Prior for the inverse variance
var1   ~ dunif(0.01, 0.99)
var2   ~ dunif(0.01, 0.99)
var3   ~ dunif(0.01, 0.99)
#var4   ~ dunif(0.01, 0.99)
#var5   ~ dunif(0.01, 0.99)
inv.var1   <- 1/var1
inv.var2   <- 1/var2
inv.var3   <- 1/var3
#inv.var4   <- 1/var4
#inv.var5   <- 1/var5
sigma1     <- sqrt(var1)
sigma2     <- sqrt(var2)
sigma3     <- sqrt(var3)
#sigma4     <- sqrt(var4)
#sigma5     <- sqrt(var5)
}"
model <- jags.model(textConnection(model_string), data = list(flfpr_rj=flfpr_rj, seatprop_rj=seatprop_rj, gdp_rj=gdp_rj, gni_rj=gni_rj,n=n), n.chains = 4)
library(rjags)
# Normalized datasets
flfpr_rj <- mean_by_year_low$flfpr
seatprop_rj <- mean_by_year_low$seatprop
#ger_tertiary_rj <- mean_by_year_low$ger_tertiary
#ger_secondary_rj <- mean_by_year_low$ger_secondary
gdp_rj <- mean_by_year_low$gdp
gni_rj <- mean_by_year_low$gni
n <- nrow(mean_by_year_low)
# JAGS Little Language
model_string <- "model{
# Likelihood
for(i in 1:n){
mu1[i] <- (beta1 + beta2*seatprop_rj[i] + beta3*gni_rj[i]+ beta4*gdp_rj[i])
flfpr_rj[i]   ~ dnorm(mu1[i],inv.var1)T(0, 10)
}
# Prior for beta
beta1 ~ dnorm(0,0.01)
beta2 ~ dnorm(0,0.01)
beta3 ~ dnorm(0,0.01)
#beta4 ~ dnorm(0,0.01)
#beta5 ~ dnorm(0,0.01)
# Prior for the inverse variance
var1   ~ dunif(0.01, 0.99)
var2   ~ dunif(0.01, 0.99)
var3   ~ dunif(0.01, 0.99)
#var4   ~ dunif(0.01, 0.99)
#var5   ~ dunif(0.01, 0.99)
inv.var1   <- 1/var1
inv.var2   <- 1/var2
inv.var3   <- 1/var3
#inv.var4   <- 1/var4
#inv.var5   <- 1/var5
sigma1     <- sqrt(var1)
sigma2     <- sqrt(var2)
sigma3     <- sqrt(var3)
#sigma4     <- sqrt(var4)
#sigma5     <- sqrt(var5)
}"
model <- jags.model(textConnection(model_string), data = list(flfpr_rj=flfpr_rj, seatprop_rj=seatprop_rj, gdp_rj=gdp_rj, gni_rj=gni_rj,n=n), n.chains = 4)
library(rjags)
# Normalized datasets
flfpr_rj <- mean_by_year_low$flfpr
seatprop_rj <- mean_by_year_low$seatprop
#ger_tertiary_rj <- mean_by_year_low$ger_tertiary
#ger_secondary_rj <- mean_by_year_low$ger_secondary
gdp_rj <- mean_by_year_low$gdp
gni_rj <- mean_by_year_low$gni
n <- nrow(mean_by_year_low)
# JAGS Little Language
model_string <- "model{
# Likelihood
for(i in 1:n){
mu1[i] <- (beta1 + beta2*seatprop_rj[i] + beta3*gni_rj[i]+ beta4*gdp_rj[i])
flfpr_rj[i]   ~ dnorm(mu1[i],inv.var1)T(0, 10)
}
# Prior for beta
beta1 ~ dnorm(0,0.01)
beta2 ~ dnorm(0,0.01)
beta3 ~ dnorm(0,0.01)
beta4 ~ dnorm(0,0.01)
#beta5 ~ dnorm(0,0.01)
# Prior for the inverse variance
var1   ~ dunif(0.01, 0.99)
var2   ~ dunif(0.01, 0.99)
var3   ~ dunif(0.01, 0.99)
var4   ~ dunif(0.01, 0.99)
#var5   ~ dunif(0.01, 0.99)
inv.var1   <- 1/var1
inv.var2   <- 1/var2
inv.var3   <- 1/var3
inv.var4   <- 1/var4
#inv.var5   <- 1/var5
sigma1     <- sqrt(var1)
sigma2     <- sqrt(var2)
sigma3     <- sqrt(var3)
sigma4     <- sqrt(var4)
#sigma5     <- sqrt(var5)
}"
model <- jags.model(textConnection(model_string), data = list(flfpr_rj=flfpr_rj, seatprop_rj=seatprop_rj, gdp_rj=gdp_rj, gni_rj=gni_rj,n=n), n.chains = 4)
library(rjags)
# Normalized datasets
flfpr_rj <- mean_by_year_low$flfpr
seatprop_rj <- mean_by_year_low$seatprop
#ger_tertiary_rj <- mean_by_year_low$ger_tertiary
#ger_secondary_rj <- mean_by_year_low$ger_secondary
gdp_rj <- mean_by_year_low$gdp
gni_rj <- mean_by_year_low$gni
n <- nrow(mean_by_year_low)
# JAGS Little Language
model_string <- "model{
# Likelihood
for(i in 1:n){
mu1[i] <- beta1 + beta2*seatprop_rj[i] + beta3*gni_rj[i]+ beta4*gdp_rj[i]
flfpr_rj[i]   ~ dnorm(mu1[i],inv.var1)T(0, 10)
}
# Prior for beta
beta1 ~ dnorm(0,0.01)
beta2 ~ dnorm(0,0.01)
beta3 ~ dnorm(0,0.01)
beta4 ~ dnorm(0,0.01)
#beta5 ~ dnorm(0,0.01)
# Prior for the inverse variance
var1   ~ dunif(0.01, 0.99)
var2   ~ dunif(0.01, 0.99)
var3   ~ dunif(0.01, 0.99)
var4   ~ dunif(0.01, 0.99)
#var5   ~ dunif(0.01, 0.99)
inv.var1   <- 1/var1
inv.var2   <- 1/var2
inv.var3   <- 1/var3
inv.var4   <- 1/var4
#inv.var5   <- 1/var5
sigma1     <- sqrt(var1)
sigma2     <- sqrt(var2)
sigma3     <- sqrt(var3)
sigma4     <- sqrt(var4)
#sigma5     <- sqrt(var5)
}"
model <- jags.model(textConnection(model_string), data = list(flfpr_rj=flfpr_rj, seatprop_rj=seatprop_rj, gdp_rj=gdp_rj, gni_rj=gni_rj,n=n), n.chains = 4)
library(rjags)
# Normalized datasets
flfpr_rj <- mean_by_year_low$flfpr
seatprop_rj <- mean_by_year_low$seatprop
#ger_tertiary_rj <- mean_by_year_low$ger_tertiary
#ger_secondary_rj <- mean_by_year_low$ger_secondary
gdp_rj <- mean_by_year_low$gdp
gni_rj <- mean_by_year_low$gni
n <- nrow(mean_by_year_low)
# JAGS Little Language
model_string <- "model{
# Likelihood
for(i in 1:n){
mu1[i] <- beta1 + beta2*seatprop_rj[i] + beta3*gni_rj[i]+ beta4*gdp_rj[i]
flfpr_rj[i]   ~ dnorm(mu1[i],inv.var1)T(0, 10)
}
# Prior for beta
beta1 ~ dnorm(0,0.001)
beta2 ~ dnorm(0,0.001)
beta3 ~ dnorm(0,0.001)
beta4 ~ dnorm(0,0.001)
#beta5 ~ dnorm(0,0.001)
# Prior for the inverse variance
var1   ~ dunif(0.01, 0.99)
var2   ~ dunif(0.01, 0.99)
var3   ~ dunif(0.01, 0.99)
var4   ~ dunif(0.01, 0.99)
#var5   ~ dunif(0.01, 0.99)
inv.var1   <- 1/var1
inv.var2   <- 1/var2
inv.var3   <- 1/var3
inv.var4   <- 1/var4
#inv.var5   <- 1/var5
sigma1     <- sqrt(var1)
sigma2     <- sqrt(var2)
sigma3     <- sqrt(var3)
sigma4     <- sqrt(var4)
#sigma5     <- sqrt(var5)
}"
model <- jags.model(textConnection(model_string), data = list(flfpr_rj=flfpr_rj, seatprop_rj=seatprop_rj, gdp_rj=gdp_rj, gni_rj=gni_rj,n=n), n.chains = 4)
library(rjags)
# Normalized datasets
flfpr_rj <- mean_by_year_low$flfpr
seatprop_rj <- mean_by_year_low$seatprop
#ger_tertiary_rj <- mean_by_year_low$ger_tertiary
#ger_secondary_rj <- mean_by_year_low$ger_secondary
gdp_rj <- mean_by_year_low$gdp
gni_rj <- mean_by_year_low$gni
n <- nrow(mean_by_year_low)
# JAGS Little Language
model_string <- "model{
# Likelihood
for(i in 1:n){
mu1[i] <- beta1 + beta2*seatprop_rj[i] + beta3*gni_rj[i]+ beta4*gdp_rj[i]
flfpr_rj[i]   ~ dnorm(mu1[i],inv.var1)
}
# Prior for beta
beta1 ~ dnorm(0,0.01)
beta2 ~ dnorm(0,0.01)
beta3 ~ dnorm(0,0.01)
beta4 ~ dnorm(0,0.01)
#beta5 ~ dnorm(0,0.01)
# Prior for the inverse variance
var1   ~ dunif(0.01, 0.99)
var2   ~ dunif(0.01, 0.99)
var3   ~ dunif(0.01, 0.99)
var4   ~ dunif(0.01, 0.99)
#var5   ~ dunif(0.01, 0.99)
inv.var1   <- 1/var1
inv.var2   <- 1/var2
inv.var3   <- 1/var3
inv.var4   <- 1/var4
#inv.var5   <- 1/var5
sigma1     <- sqrt(var1)
sigma2     <- sqrt(var2)
sigma3     <- sqrt(var3)
sigma4     <- sqrt(var4)
#sigma5     <- sqrt(var5)
}"
model <- jags.model(textConnection(model_string), data = list(flfpr_rj=flfpr_rj, seatprop_rj=seatprop_rj, gdp_rj=gdp_rj, gni_rj=gni_rj,n=n), n.chains = 4)
update(model, 10000, progress.bar="none"); # Burn-in for 10000 samples
samp <- coda.samples(model,
variable.names=c("beta1","beta2","beta3", "beta4", "sigma1", "sigma2", "sigma3","sigma4"),
n.iter=20000, progress.bar="text")
summary(samp)
traceplot(samp)
# sometimes the gelman plot won't fit on a screen
# we have to reduce the margins
par(mar=c(.4,.4,.4,.4))
gelman.plot(samp)
saveRDS(samp, "flfpr_dependency_fork.RDS")
library(rjags)
# Normalized datasets
flfpr_rj <- mean_by_year_high$flfpr
seatprop_rj <- mean_by_year_high$seatprop
#ger_tertiary_rj <- mean_by_year_low$ger_tertiary
#ger_secondary_rj <- mean_by_year_low$ger_secondary
gdp_rj <- mean_by_year_high$gdp
gni_rj <- mean_by_year_high$gni
n <- nrow(mean_by_year_high)
# JAGS Little Language
model_string <- "model{
# Likelihood
for(i in 1:n){
mu1[i] <- beta1 + beta2*seatprop_rj[i] + beta3*gni_rj[i]+ beta4*gdp_rj[i]
flfpr_rj[i]   ~ dnorm(mu1[i],inv.var1)
}
# Prior for beta
beta1 ~ dnorm(0,0.01)
beta2 ~ dnorm(0,0.01)
beta3 ~ dnorm(0,0.01)
beta4 ~ dnorm(0,0.01)
#beta5 ~ dnorm(0,0.01)
# Prior for the inverse variance
var1   ~ dunif(0.01, 0.99)
var2   ~ dunif(0.01, 0.99)
var3   ~ dunif(0.01, 0.99)
var4   ~ dunif(0.01, 0.99)
#var5   ~ dunif(0.01, 0.99)
inv.var1   <- 1/var1
inv.var2   <- 1/var2
inv.var3   <- 1/var3
inv.var4   <- 1/var4
#inv.var5   <- 1/var5
sigma1     <- sqrt(var1)
sigma2     <- sqrt(var2)
sigma3     <- sqrt(var3)
sigma4     <- sqrt(var4)
#sigma5     <- sqrt(var5)
}"
model <- jags.model(textConnection(model_string), data = list(flfpr_rj=flfpr_rj, seatprop_rj=seatprop_rj, gdp_rj=gdp_rj, gni_rj=gni_rj,n=n), n.chains = 4)
is.nan.data.frame <- function(x)
do.call(cbind, lapply(x, is.nan))
mean_by_year_low[is.nan(mean_by_year_low)] <- 0
mean_by_year_high[is.nan(mean_by_year_high)] <- 0
library(rjags)
# Normalized datasets
flfpr_rj <- mean_by_year_high$flfpr
seatprop_rj <- mean_by_year_high$seatprop
#ger_tertiary_rj <- mean_by_year_low$ger_tertiary
#ger_secondary_rj <- mean_by_year_low$ger_secondary
gdp_rj <- mean_by_year_high$gdp
gni_rj <- mean_by_year_high$gni
n <- nrow(mean_by_year_high)
# JAGS Little Language
model_string <- "model{
# Likelihood
for(i in 1:n){
mu1[i] <- beta1 + beta2*seatprop_rj[i] + beta3*gni_rj[i]+ beta4*gdp_rj[i]
flfpr_rj[i]   ~ dnorm(mu1[i],inv.var1)
}
# Prior for beta
beta1 ~ dnorm(0,0.01)
beta2 ~ dnorm(0,0.01)
beta3 ~ dnorm(0,0.01)
beta4 ~ dnorm(0,0.01)
#beta5 ~ dnorm(0,0.01)
# Prior for the inverse variance
var1   ~ dunif(0.01, 0.99)
var2   ~ dunif(0.01, 0.99)
var3   ~ dunif(0.01, 0.99)
var4   ~ dunif(0.01, 0.99)
#var5   ~ dunif(0.01, 0.99)
inv.var1   <- 1/var1
inv.var2   <- 1/var2
inv.var3   <- 1/var3
inv.var4   <- 1/var4
#inv.var5   <- 1/var5
sigma1     <- sqrt(var1)
sigma2     <- sqrt(var2)
sigma3     <- sqrt(var3)
sigma4     <- sqrt(var4)
#sigma5     <- sqrt(var5)
}"
model <- jags.model(textConnection(model_string), data = list(flfpr_rj=flfpr_rj, seatprop_rj=seatprop_rj, gdp_rj=gdp_rj, gni_rj=gni_rj,n=n), n.chains = 4)
update(model, 10000, progress.bar="none"); # Burn-in for 10000 samples
samp <- coda.samples(model,
variable.names=c("beta1","beta2","beta3", "beta4", "sigma1", "sigma2", "sigma3","sigma4"),
n.iter=20000, progress.bar="text")
summary(samp)
traceplot(samp)
# sometimes the gelman plot won't fit on a screen
# we have to reduce the margins
par(mar=c(.4,.4,.4,.4))
gelman.plot(samp)
saveRDS(samp, "flfpr_fork_highincome.RDS")
##### LOW INCOME ##########
library(rjags)
# Normalized datasets
flfpr_rj <- mean_by_year_low$flfpr
seatprop_rj <- mean_by_year_low$seatprop
ger_tertiary_rj <- mean_by_year_low$ger_tertiary
ger_secondary_rj <- mean_by_year_low$ger_secondary
gdp_rj <- mean_by_year_low$gdp
gni_rj <- mean_by_year_low$gni
n <- nrow(mean_by_year_low)
# JAGS Little Language
model_string <- "model{
# Likelihood
for(i in 1:n){
mu1[i] <- beta1 + beta2*seatprop_rj[i] + beta3*gni_rj[i]+ beta4*gdp_rj[i]+ beta5*ger_secondary_rj[i] + beta6*ger_tertiary_rj[i]
flfpr_rj[i]   ~ dnorm(mu1[i],inv.var1)
}
# Prior for beta
beta1 ~ dnorm(0,0.01)
beta2 ~ dnorm(0,0.01)
beta3 ~ dnorm(0,0.01)
beta4 ~ dnorm(0,0.01)
beta5 ~ dnorm(0,0.01)
beta6 ~ dnorm(0,0.01)
# Prior for the inverse variance
var1   ~ dunif(0.01, 0.99)
var2   ~ dunif(0.01, 0.99)
var3   ~ dunif(0.01, 0.99)
var4   ~ dunif(0.01, 0.99)
var5   ~ dunif(0.01, 0.99)
var6   ~ dunif(0.01, 0.99)
inv.var1   <- 1/var1
inv.var2   <- 1/var2
inv.var3   <- 1/var3
inv.var4   <- 1/var4
inv.var5   <- 1/var5
inv.var6   <- 1/var6
sigma1     <- sqrt(var1)
sigma2     <- sqrt(var2)
sigma3     <- sqrt(var3)
sigma4     <- sqrt(var4)
sigma5     <- sqrt(var5)
sigma6     <- sqrt(var6)
}"
model <- jags.model(textConnection(model_string), data = list(flfpr_rj=flfpr_rj, seatprop_rj=seatprop_rj, gdp_rj=gdp_rj, gni_rj=gni_rj,ger_secondary_rj=ger_secondary_rj,ger_tertiary_rj=ger_tertiary_rj ,n=n), n.chains = 6)
update(model, 10000, progress.bar="none"); # Burn-in for 10000 samples
samp <- coda.samples(model,
variable.names=c("beta1","beta2","beta3", "beta4","beta5","beta6", "sigma1", "sigma2", "sigma3","sigma4","sigma5","sigma6"),
n.iter=20000, progress.bar="text")
summary(samp)
traceplot(samp)
# sometimes the gelman plot won't fit on a screen
# we have to reduce the margins
par(mar=c(.4,.4,.4,.4))
gelman.plot(samp)
saveRDS(samp, "flfpr_fork_lowincome.RDS")
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(rgdal)
library(ggplot2)
library(wesanderson)
library(RColorBrewer)
my_dir= '/Users/rtseinstein/Downloads/bgd_trs_roads_lged/'
my_link= paste(my_dir,'bgd_trs_roads_lged.shp',sep="")
my_shp= readOGR(my_link)
plot(my_shp)
my_dir= '/Users/rtseinstein/Downloads/'
adm0_link= paste(my_dir,'BGD_adm/BGD_adm0.shp',sep="")
adm0=readOGR(adm0_link)
adm1_link= paste(my_dir,'BGD_adm/BGD_adm1.shp',sep="")
adm1=readOGR(adm1_link)
plot(adm0)
plot(adm1)
plot(adm0,adm1)
plot(adm1)
install.packages('shiny')
shiny::runApp('Desktop/EPA/Quarter3/Advanced Discrete Course /Week3/ADES_TrafficData')
runApp('Desktop/EPA/Quarter3/Advanced Discrete Course /Week3/ADES_TrafficData')
library(shiny); runApp('Desktop/Learning/RShiny /app3.R')
runApp('Desktop/Learning/RShiny /app3.R')
runApp('Desktop/Learning/RShiny /app3.R')
runApp('Desktop/Learning/RShiny /app3.R')
runApp('Desktop/Learning/RShiny /app3.R')
library(leaflet)
runApp('Desktop/Learning/RShiny /app3.R')
